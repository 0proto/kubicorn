// Code generated by go-bindata.
// sources:
// bootstrap/README.md
// bootstrap/amazon_k8s_ubuntu_16.04_master.sh
// bootstrap/amazon_k8s_ubuntu_16.04_node.sh
// bootstrap/digitalocean_k8s_ubuntu_16.04_master.sh
// bootstrap/digitalocean_k8s_ubuntu_16.04_node.sh
// bootstrap/inject.go
// bootstrap/vpn/meshbirdMaster.sh
// bootstrap/vpn/meshbirdNode.sh
// DO NOT EDIT!

package bootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xc1\x6a\xdc\x40\x10\x44\xef\x06\xff\x43\xc1\x1e\x72\x59\x94\x4f\x08\xe4\x10\xd8\x43\x72\x0a\xce\x55\x23\x4d\xc9\x6a\xef\x68\x5a\xcc\xf4\x58\x88\x90\x7f\x0f\xad\xdd\x98\x60\x9f\xbb\xab\xea\x75\xd7\x09\x5f\x55\xad\x5a\x09\xeb\xe3\xc3\xe3\xc3\xcf\x99\x95\x08\x85\xb0\x99\x18\xfe\x8d\x50\xc7\x22\xab\x55\xd8\x1c\x0c\x75\x96\x15\x9b\xd8\x7c\x2c\x45\x4e\xa1\x25\x43\x7f\x6d\x83\x8c\x5a\x72\x8f\xb5\xe8\x24\x89\xb5\x73\xcb\x6f\x64\xc2\x54\x48\x98\x22\xc4\x88\x5d\x5b\x81\x6e\xf9\x0c\x2d\x58\x34\xca\xb4\xbb\x91\xe7\x1a\x42\xde\x61\xb2\xb0\xbb\xd3\xbc\x25\x3b\x13\xa7\x89\xa3\xc9\x2b\xd3\x8e\xcd\x49\x36\xa2\xb9\xae\xa2\x6f\x95\x05\x31\x58\xe8\x3d\x47\xb2\x18\x02\x9e\xbe\xbb\xcd\xe9\x74\xc2\x05\x99\x8c\x3e\x32\x2e\x6b\x0a\x46\x68\x33\x68\x26\x74\xba\xc7\x7f\x38\xd7\xc5\x3f\xd4\x81\x11\x35\x7f\xb2\x0e\xbf\x8a\x18\x31\x84\x3a\x23\xc9\x95\x08\x7e\x6b\xf7\x2e\x64\xd1\xc2\x03\x05\x92\x11\x3e\xd8\xde\xd0\xeb\xac\x2d\x45\x5c\x10\xf5\x8b\xeb\x2f\xd3\x91\x53\x18\x52\xda\x31\x86\x0c\xcd\x69\xc7\x33\x0d\x62\x98\x8a\x2e\xff\x7f\x38\xe4\x88\xac\xdb\x4c\xff\x4a\xaa\x3c\x1f\x62\x57\xf9\x3f\xbc\x96\xfe\x29\xa4\xc6\xfa\xfb\x4f\x8f\x6a\xa5\x8d\xe6\xb7\x47\x4e\x92\x89\xb1\x55\xd3\x05\x57\xee\x9f\x5f\x7d\x0b\x6b\x90\x72\x2f\x77\x93\x94\x30\x10\x92\x5f\x38\x1a\x23\x24\x9b\xde\x3a\xbb\xe1\x77\xde\x8b\xd4\xb7\xc5\x80\x51\x23\x31\xce\x21\x3f\xf3\x7c\x90\x49\x75\x15\x73\xbc\x7d\x7c\x20\x5e\x5a\xb5\xc3\xbf\xfb\x1b\x00\x00\xff\xff\x14\xe9\x88\x88\x71\x02\x00\x00")

func bootstrapReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapReadmeMd,
		"bootstrap/README.md",
	)
}

func bootstrapReadmeMd() (*asset, error) {
	bytes, err := bootstrapReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/README.md", size: 625, mode: os.FileMode(493), modTime: time.Unix(1502122550, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAmazon_k8s_ubuntu_1604_masterSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x51\x6b\x1c\x37\x10\x7e\x5f\xd8\xff\xf0\xf5\x6c\x48\x03\xd1\xca\x4e\x4b\x0b\x86\x14\x92\xd4\x0f\x6e\x4a\x62\xcc\xb5\x7d\xe9\x8b\x56\x9a\xdb\x55\x4f\x2b\x2d\xd2\xe8\xec\xc3\x76\x7f\x7b\xd1\xee\x5e\x7c\xa6\xa1\xf4\x2d\xc7\xc1\x32\xdf\xcc\x7c\xf3\xcd\x68\xa4\x93\x6f\x64\x4e\x51\xb6\xd6\x4b\xf2\x3b\xb4\x2a\xf5\x75\x95\x88\x21\xa8\xae\xb4\xc1\xdf\x75\x55\x57\x27\x10\x5f\xe9\x57\x6a\xaf\x7b\x4a\x84\x9d\x72\x99\x12\x54\x24\x58\xff\x17\x69\x26\x03\xeb\x39\x80\x7b\x42\xd2\xd1\x8e\xdc\xe0\x0f\x9a\x02\xe8\x6e\x74\x56\x5b\x76\x7b\xf8\xc0\xc8\xc9\xfa\x0e\x0a\x4c\xc3\xe8\x14\x17\xc3\x29\xdf\x65\xd5\x11\x38\x2c\x74\x13\xcf\x5c\xa4\x14\x55\xa9\xb8\xc8\xeb\x90\xe3\x14\xd7\x13\x72\xa2\x58\x50\x67\x07\x3b\xc5\xdb\x58\x30\x84\xcd\x33\xea\xd0\x59\x0d\xeb\x4b\x40\x22\x6c\xac\xa3\xd4\xe0\xdd\x1e\x86\x92\xed\x3c\x94\x73\x4f\x1d\x2c\x5d\xa5\x3e\x64\x67\x4a\xdd\x96\xa0\x5a\x37\xe9\x6a\x09\xe5\x20\x14\x23\x66\xcf\x76\xa0\x57\x50\xde\xcc\xfd\xf6\xe4\xdc\xd2\x35\x22\x29\x87\xdb\x10\xb7\x0d\xae\x36\xd8\x87\x0c\x4f\x64\xa0\x83\x37\x96\x6d\xf0\xca\xcd\x9a\x5e\xe1\x36\x5a\x26\x58\x2e\xea\xe6\x93\x3e\x41\x88\x18\xd4\x96\xa0\x7c\xe0\x9e\xe2\x33\xea\xa6\xae\x4e\xa6\xff\xfa\xd3\x87\xcb\x8f\x6f\x56\x57\x1f\x7f\xb9\x7c\xbf\xbe\xfc\x79\x32\x57\x75\x75\xfd\xe9\x66\xfd\x84\x16\x6b\xf5\x75\x97\xa5\xae\x74\x8e\x0e\x22\xa1\x67\x1e\xd3\x85\x94\xa3\xd2\x5b\xd5\x51\x6a\xb4\x0b\xd9\x34\x5d\x08\x9d\xa3\x46\x87\x41\xaa\x91\xa5\x09\xba\x7c\xc5\x96\xf6\x4d\x37\x76\x78\x40\xca\x26\x60\x81\xa0\x8c\x81\xa8\x2b\x0e\x59\xf7\x90\xc4\x53\xb0\x4c\x21\x47\x4d\xa9\x71\x36\x71\x63\xe4\x36\xb7\x14\x3d\xf1\x82\xd4\x55\xea\x21\x34\x5e\x90\xee\x03\x56\x86\xda\x49\xcb\x85\x2c\xb9\xcd\x51\xb0\x0d\x12\x4f\xa6\xb8\x23\x6f\x95\xc3\xa0\xac\x5f\xe1\xa7\xff\x5b\xed\x45\xe9\xb9\xc8\xed\x88\x91\x47\xa3\x98\x20\xf6\x4f\x90\xf5\x89\xcb\xc2\x89\x3d\xfe\xac\x2b\x00\x48\x41\x2b\x3e\x18\xd4\x72\xd9\xb6\x74\xb0\x4d\xd0\x5b\x8a\x8d\x0d\x07\xa0\xf0\x70\x54\x3e\x8d\x21\xb2\x98\x86\x7a\x70\x15\x25\x8e\xf8\xd8\x54\x66\x78\x73\xde\xfc\xd8\x9c\x89\xb3\xb3\x03\x3e\xcd\x5d\x64\xb6\x2e\x15\xad\x75\x95\xf6\x89\x69\xd0\xec\x40\x7e\x5a\xf5\xb9\xe8\xb1\x23\xb1\x8a\xfc\x19\xaf\xab\xeb\xdf\xde\xfd\x7a\xf5\xfe\xea\xfa\xcd\xe9\xb7\xa4\x5f\x0f\xc4\xca\x28\x56\x10\x62\xcc\xad\xb3\x5a\xd8\x71\xf7\x3d\x1e\xa0\x33\x43\x18\xac\xb0\x82\xd8\xe0\xf5\xcb\xba\xba\xbe\xb9\xfa\xfd\xed\xfa\x72\xca\xb4\x1b\x1d\xfc\xc6\x96\x43\xee\x22\x8d\x10\x6f\x71\x0e\xe2\xfe\xec\x00\x58\x4f\x7c\xc4\x72\x31\xb3\xfc\x8b\xf7\x1c\x0f\xb8\x53\xb1\x4b\x2f\x8b\xb4\xa5\x6d\x44\x4a\xc4\x4f\xa6\xf5\x96\x21\x84\x1a\x6d\xa2\xb8\xa3\x28\x5a\xeb\x8d\x28\x43\xc4\xe9\x7d\xb9\x28\x8f\x10\x82\xc3\x96\x3c\x4e\xef\xa7\xeb\xf4\x88\x67\xf1\xca\xec\x28\xb2\x4d\x24\x94\x31\x91\x52\x2a\x79\xcb\x18\x1e\x9f\x45\x6a\x8a\x2c\xe8\x8e\xa3\x12\x49\xf9\xe7\x71\xa7\xf7\x9f\x27\xf0\x38\x3f\xe4\xeb\x5e\xf9\x6d\xc2\x07\x72\x89\xf6\xb8\x78\x39\x4b\x2e\x43\x57\xe3\xe8\x96\x2d\x11\x9b\xc3\xce\x9a\xa0\x53\x33\xc6\x50\x9e\x2b\xad\x9c\xd5\xa1\x09\xb1\x93\xbb\xd7\xcd\x77\xb2\x23\x2e\x0f\x9e\x98\x4e\x8b\x8e\x57\x53\x2e\x6b\xa7\xca\xf3\x23\xfb\x90\x0e\x6e\x65\x06\x79\xde\xfc\x20\x17\xaa\xbd\x1a\xdc\x52\x51\x4c\x32\xe6\x03\x9a\x76\xff\x88\x4d\x99\xc1\xfa\xa6\x38\x4b\x0f\xc3\xd6\xd8\x08\x31\x42\xf6\x61\x20\x99\xdb\xec\x39\xcb\xe9\x66\xd5\x95\x1e\xff\x23\xfb\x0b\x19\x72\x2e\x59\x57\xba\x0f\xb7\x1e\xe2\x06\xb3\xf7\x62\xfe\x7c\x21\xe3\x9f\x00\x00\x00\xff\xff\xab\x7f\x84\x35\x31\x07\x00\x00")

func bootstrapAmazon_k8s_ubuntu_1604_masterShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAmazon_k8s_ubuntu_1604_masterSh,
		"bootstrap/amazon_k8s_ubuntu_16.04_master.sh",
	)
}

func bootstrapAmazon_k8s_ubuntu_1604_masterSh() (*asset, error) {
	bytes, err := bootstrapAmazon_k8s_ubuntu_1604_masterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/amazon_k8s_ubuntu_16.04_master.sh", size: 1841, mode: os.FileMode(493), modTime: time.Unix(1502122550, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAmazon_k8s_ubuntu_1604_nodeSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\x4f\x6b\xdc\x3e\x14\xbc\x1b\xfc\x1d\xe6\xb7\x1b\xc8\x25\x96\xf3\x3b\x15\x02\x29\xf4\xcf\x1e\xd2\xd2\x14\xda\x85\x5e\x7a\x91\xa5\x17\x5b\x59\x59\x32\x7a\x4f\x49\x96\x34\xfd\xec\x45\xde\xdd\x6e\x72\xeb\x2d\xcb\x82\x99\xd1\x78\xde\x3c\x6b\x96\xff\xb5\x99\x53\xdb\xb9\xd0\x52\xb8\x43\xa7\x79\xa8\x2b\x26\x41\x43\x75\x65\x2c\x7e\xd7\x55\x5d\x2d\xd1\xbc\xd2\xaf\xcc\x5e\x0f\xc4\x84\x3b\xed\x33\x31\x74\x22\xb8\x70\x4b\x46\xc8\xc2\x05\x89\x90\x81\xc0\x26\xb9\x49\x14\x7e\xd0\x2c\xa0\x87\xc9\x3b\xe3\xc4\x6f\x11\xa2\x20\xb3\x0b\x3d\x34\x84\xc6\xc9\x6b\x29\xc0\xeb\xd0\x67\xdd\x13\x24\xee\xed\x66\x9f\xdd\x90\x32\x54\x73\x39\xa2\x60\x62\x4e\xb3\x6e\x20\x64\xa6\x54\x58\xef\x46\x37\xeb\x5d\x2a\x1c\xe2\xcd\x0b\xeb\xd8\x3b\x03\x17\x8a\x80\x09\x37\xce\x13\x2b\xbc\xdf\xc2\x12\xbb\x3e\x40\x7b\x7f\xdc\x60\xbf\x15\x0f\x31\x7b\x5b\xe6\x76\x04\xdd\xf9\x39\x57\x47\x28\x17\xa1\x05\x29\x07\x71\x23\x9d\x41\x07\xbb\xdb\x77\x20\xef\xf7\x5b\x23\x91\xf6\xb8\x8f\x69\xa3\x70\x75\x83\x6d\xcc\x08\x44\x16\x26\x06\xeb\xc4\xc5\xa0\xfd\x2e\xd3\x19\xee\x93\x13\x82\x93\x92\x6e\x77\xd3\x4b\xc4\x84\x51\x6f\x08\x3a\x44\x19\x28\xbd\xb0\x56\x75\xb5\x9c\xff\xeb\xaf\x9f\x57\xd7\x97\x8b\xab\xeb\x4f\xab\x0f\xeb\xd5\xc7\x19\x2e\xea\xea\xcb\xbb\xef\xeb\xd5\xb7\x23\xbf\xc3\x8b\xd7\x2d\x4c\x5d\x99\x9c\x3c\x1a\xc6\x20\x32\xf1\x45\xdb\x4e\xda\x6c\x74\x4f\xac\x8c\x8f\xd9\xaa\x3e\xc6\xde\x93\x32\x71\x6c\xf5\x24\xad\x8d\xa6\x3c\x9b\x0d\x6d\x55\x3f\xf5\xf8\x05\xce\x36\x62\x4f\x41\x5b\x8b\xa6\xae\x24\x66\x33\xa0\x25\x99\xc5\x2d\xc7\x9c\x0c\xb1\xf2\x8e\x45\xd9\x76\x93\x3b\x4a\x81\x64\xcf\xd4\x15\x0f\x68\x0c\x4e\xc9\x0c\x11\x0b\x4b\xdd\x9c\xe5\xa2\x2d\xef\xaa\x67\x62\x17\x5b\x1c\x61\xf3\x40\xc1\x69\x8f\x51\xbb\xb0\xc0\xdb\x7f\x9d\x76\x5a\x76\x2e\x71\x7b\x12\xe4\xc9\x6a\x21\x34\xdb\x23\xe5\x02\x4b\x29\x5d\xb3\xc5\xcf\xba\x02\x00\x8e\x46\xcb\x01\x50\x27\xa5\x71\x7c\xc0\x36\x9a\x0d\x25\xe5\xe2\x81\x28\x3e\x92\x74\xe0\x29\x26\x69\xe6\x8f\x7a\x38\x2a\x49\x3c\xc9\x73\xa8\xed\x78\xf9\xbf\x7a\xa3\xce\x9b\xf3\xf3\x12\x8c\xb7\x2c\x34\x1a\xf1\xa0\x30\x37\x7b\xe7\xff\xfc\x80\x45\x27\xf9\xcb\xd7\xd5\xde\x06\x89\x98\xe4\x08\x6f\xa3\x0b\x68\x1a\x89\x1b\x0a\x38\x79\x9c\x4b\xf8\x84\x93\xc7\x5d\xeb\x9e\xfe\x04\x00\x00\xff\xff\x2f\x08\xc6\x90\xca\x04\x00\x00")

func bootstrapAmazon_k8s_ubuntu_1604_nodeShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAmazon_k8s_ubuntu_1604_nodeSh,
		"bootstrap/amazon_k8s_ubuntu_16.04_node.sh",
	)
}

func bootstrapAmazon_k8s_ubuntu_1604_nodeSh() (*asset, error) {
	bytes, err := bootstrapAmazon_k8s_ubuntu_1604_nodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/amazon_k8s_ubuntu_16.04_node.sh", size: 1226, mode: os.FileMode(493), modTime: time.Unix(1502122550, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapDigitalocean_k8s_ubuntu_1604_masterSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\x51\x6b\x1c\x37\x10\x7e\x5f\xd8\xff\xf0\xf5\x6c\x48\x03\x91\x64\xa7\xd0\x82\xc1\x85\x24\xf5\x83\xdb\x92\x18\xe3\xb6\x2f\x7d\xd1\x49\x73\xbb\xea\x69\xa5\x45\x9a\x75\x7c\x38\xce\x6f\x2f\xd2\xed\xfa\xce\x2f\xa5\x6f\x39\x0e\x8e\xf9\x34\x9a\xef\x1b\xcd\x27\xdd\xc9\x77\x6a\xca\x49\xad\x5d\x50\x14\xee\xb1\xd6\xb9\x6f\x9b\x4c\x0c\x41\x6d\x63\x2c\xbe\xb6\x4d\xdb\x9c\x40\x7c\xa3\x4f\xe1\xbe\xeb\x29\x13\xee\xb5\x9f\x28\x43\x27\x82\x0b\xff\x90\x61\xb2\x70\x81\x23\xb8\x27\x64\x93\xdc\xc8\x12\x7f\x51\x4d\xa0\x87\xd1\x3b\xe3\xd8\xef\x10\x22\x63\xca\x2e\x74\xd0\x60\x1a\x46\xaf\xb9\x04\x5e\x87\x6e\xd2\x1d\x81\xe3\x5c\xae\xd6\xd9\x93\x14\x52\x9d\xcb\x12\x05\x13\xa7\x54\xf3\x7a\xc2\x94\x29\x15\xd4\xbb\xc1\xd5\x7c\x97\x0a\x86\xb8\x79\x51\x3a\x76\xce\xc0\x85\x92\x90\x09\x1b\xe7\x29\x4b\xbc\xdf\xc1\x52\x76\x5d\x80\xf6\xfe\xd0\xc1\xdc\x55\xee\xe3\xe4\x6d\xe1\x5d\x13\xf4\xda\x57\x5d\x6b\x42\x19\x84\x66\xa4\x29\xb0\x1b\xe8\x0d\x74\xb0\xfb\x7e\x7b\xf2\x7e\xee\x1a\x89\xb4\xc7\xe7\x98\xb6\x12\xd7\x1b\xec\xe2\x84\x40\x64\x61\x62\xb0\x8e\x5d\x0c\xda\xef\x35\xbd\xc1\xe7\xe4\x98\xe0\xb8\xa8\xdb\x4f\xfa\x04\x31\x61\xd0\x5b\x82\x0e\x91\x7b\x4a\x2f\x4a\xcb\xb6\x39\xa9\xdf\xbb\x4f\xbf\x5d\x7d\xbc\x5c\x5d\x7f\xfc\xf5\xea\xc3\xdd\xd5\x2f\x35\x5c\xb5\xcd\xcd\xa7\xdb\xbb\x03\x5a\xa2\xd5\xb2\xe3\x5b\x5a\xa6\x6d\xcc\x94\x3c\x44\x46\xcf\x3c\xe6\x0b\xa5\x46\x6d\xb6\xba\xa3\x2c\x8d\x8f\x93\x95\x5d\x8c\x9d\x27\x69\xe2\xa0\xf4\xc8\xca\x46\x53\x7e\xc5\x96\x76\xb2\x1b\x3b\x7c\x41\x9e\x6c\xc4\x0c\x41\x5b\x0b\xd1\x36\x1c\x27\xd3\x43\x11\xd7\x64\x95\xe3\x94\x0c\x65\xe9\x5d\x66\x69\xd5\x76\x5a\x53\x0a\xc4\x33\xd2\x36\xb9\x87\x30\x78\x45\xa6\x8f\x58\x59\x5a\x57\x2d\x17\xaa\xec\x95\x47\xc9\x2e\x2a\x1c\x42\xf1\x40\xc1\x69\x8f\x41\xbb\xb0\xc2\xcf\xff\x97\xed\x55\xe9\xb9\xc8\xed\x88\x31\x8d\x56\x33\x41\xec\x0e\x90\x0b\x99\x8b\xed\xc4\x0e\x7f\xb7\x0d\x00\xe4\x68\x34\x2f\x01\xad\xb9\x78\x2e\x2f\xb1\x8d\x66\x4b\x49\xba\xb8\x00\xa5\x0e\x27\x1d\xf2\x18\x13\x8b\x7a\xa8\xcb\x52\x51\xe2\x89\x8f\x43\x6d\x87\xcb\x73\xf9\x93\x3c\x13\x67\x67\x0b\x5e\xcf\x5d\x4c\xec\x7c\x2e\x5a\xdb\x26\xef\x32\xd3\x60\xd8\x83\x42\x35\xfc\x9e\xf4\x78\x21\xb3\x4e\xfc\x8c\xb7\xcd\xcd\xed\xf5\x9f\xef\xee\xae\xae\x6f\x2e\x4f\xbf\x77\x1b\x13\xc3\xc6\x95\x59\x75\x89\x46\x88\x77\x38\xc7\x8a\xa7\x70\xb6\x5a\x20\x17\x88\x81\x2f\x30\x13\x43\x58\xac\x2e\x56\x10\x1b\xbc\x3d\x42\x50\x91\xf3\xd7\x6d\x53\xa7\x74\xfa\x4c\x50\x4e\x9e\x87\x51\x49\x37\xb6\xcd\xcd\x1f\xef\x7f\xbf\xfe\x50\x59\xab\xad\x16\x6a\x39\xd0\xeb\x7d\x2f\x73\xd3\x48\x94\x89\x0f\xa1\x0b\x8e\x21\x84\x1e\x5d\xa6\x74\x4f\x49\xac\x5d\xb0\xa2\x1c\x21\x4e\x1f\xcb\x65\x79\x82\x10\x1c\xb7\x14\x70\xfa\x58\xaf\xd4\x13\x5e\xe4\x6b\x7b\x4f\x89\x5d\x26\xa1\xad\x4d\x94\x73\xd9\x37\xab\x79\x7a\x91\x69\x28\xb1\xa0\x07\x4e\x5a\x64\x1d\x5e\xe6\x9d\x3e\x3e\xf7\xf5\x74\xd0\x5b\x0e\x58\x8f\xa3\x9f\x1d\x21\x36\x8b\x3f\x6d\x34\x59\x8e\x29\x96\x07\xca\x68\xef\x4c\x94\x31\x75\xea\xfe\xad\xfc\x41\x75\xc4\xe5\x89\x13\x75\x32\x74\x6c\x43\x35\x5b\x4c\x97\x07\x47\xf5\x31\x2f\xcb\xda\x0e\xea\x5c\xfe\xa8\xe6\x52\x3b\x3d\xf8\x99\x51\x54\x19\xfb\x29\x56\x9f\x1f\x55\xd3\x76\x70\x41\x96\xc5\xfd\xdf\xcf\x6d\x8c\xdc\x36\xc3\xd6\xba\x04\x31\xe2\xab\xaa\x57\xa8\x6d\xcc\xf8\x1f\x5b\x97\x34\xb5\x27\x29\x95\xfe\x0d\x00\x00\xff\xff\xe5\xc6\x54\x4b\xee\x06\x00\x00")

func bootstrapDigitalocean_k8s_ubuntu_1604_masterShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapDigitalocean_k8s_ubuntu_1604_masterSh,
		"bootstrap/digitalocean_k8s_ubuntu_16.04_master.sh",
	)
}

func bootstrapDigitalocean_k8s_ubuntu_1604_masterSh() (*asset, error) {
	bytes, err := bootstrapDigitalocean_k8s_ubuntu_1604_masterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/digitalocean_k8s_ubuntu_16.04_master.sh", size: 1774, mode: os.FileMode(493), modTime: time.Unix(1502134047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapDigitalocean_k8s_ubuntu_1604_nodeSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\x4d\x6b\xdc\x3a\x14\xdd\x1b\xfc\x1f\xce\x9b\x09\x64\x13\xdb\x79\xab\x07\x81\x3c\x78\xaf\x9d\x45\x5a\x9a\x42\x3b\xd0\x4d\x37\xb2\x74\x63\x2b\x23\x4b\x46\xf7\x2a\xc9\x90\xa6\xbf\xbd\xc8\xf6\xe4\xa3\xd9\x74\x97\x61\xc0\x9c\x73\xaf\xce\x3d\x57\x3a\xeb\xbf\x9a\xc4\xb1\x69\xad\x6f\xc8\xdf\xa0\x55\xdc\x97\x05\x93\xa0\xa2\xb2\xd0\x06\x3f\xcb\xa2\x2c\xd6\xa8\xde\xe8\x97\x67\x6f\x7b\x62\xc2\x8d\x72\x89\x18\x2a\x12\xac\xbf\x26\x2d\x64\x60\xbd\x04\x48\x4f\x60\x1d\xed\x28\x35\xbe\xd1\xd4\x40\x77\xa3\xb3\xda\x8a\xdb\xc3\x07\x41\x62\xeb\x3b\x28\x08\x0d\xa3\x53\x92\x81\x53\xbe\x4b\xaa\x23\x48\x58\xe4\x26\x9d\x79\x48\x1e\xaa\x38\x97\xc8\xeb\x90\xe2\xd4\xd7\x13\x12\x53\xcc\xac\xb3\x83\x9d\xfa\x6d\xcc\x1c\xc2\xd5\x0b\xe9\xd0\x59\x0d\xeb\x73\x03\x13\xae\xac\x23\xae\xf1\xff\x1e\x86\xd8\x76\x1e\xca\xb9\xa7\x0d\x96\xad\xb8\x0f\xc9\x99\x3c\xb7\x25\xa8\xd6\x4d\xbe\x5a\x42\x7e\x08\x25\x88\xc9\x8b\x1d\xe8\x04\xca\x9b\x79\xdf\x9e\x9c\x5b\xb6\x46\x24\xe5\x70\x1b\xe2\xae\xc6\xc5\x15\xf6\x21\xc1\x13\x19\xe8\xe0\x8d\x15\x1b\xbc\x72\xb3\xa7\x13\xdc\x46\x2b\x04\x2b\xd9\xdd\xfc\xd2\x6b\x84\x88\x41\xed\x08\xca\x07\xe9\x29\xbe\x90\xae\xcb\x62\x3d\xfd\xb7\x9f\x3f\x6e\x2e\xcf\x57\x17\x97\x1f\x36\xef\xb6\x9b\xf7\x13\x5c\x95\xc5\xa7\xff\xbe\x6e\x37\x5f\x9e\xf8\x19\xaf\xde\x36\x30\x65\xc1\xc9\x04\xe8\x14\x1d\x2a\x46\x2f\x32\xf2\x59\xd3\x8c\x4a\xef\x54\x47\x5c\x6b\x17\x92\xa9\xbb\x10\x3a\x47\xb5\x0e\x43\xa3\x46\x69\x4c\xd0\xf9\x5b\xed\x68\x5f\x77\x63\x87\x1f\x98\x44\x16\x0a\xca\x18\x54\x8b\xb0\x84\xa4\x7b\x34\x24\xd3\x89\x86\x43\x8a\x9a\xb8\x76\x96\xa5\x36\xcd\x2e\xb5\x14\x3d\xc9\xc2\x2c\x67\xb8\x47\xa5\x71\x4c\xba\x0f\x58\x19\x6a\x27\x57\x67\x4d\x16\xa8\x9f\x9d\xb0\xa1\xc1\x13\xac\xee\xc8\x5b\xe5\x30\x28\xeb\x57\xf8\xf7\x4f\x47\x1e\x3f\x5e\x41\x76\xdf\x91\x20\x8d\x46\x09\xa1\xda\xff\xc6\x5b\xcf\x92\xd3\x58\xed\xf1\xbd\x2c\x00\x80\x83\x56\x72\x00\xd4\x4a\x8e\x22\x1f\xb0\x09\x7a\x47\xb1\xb6\xe1\x40\x64\x1d\x89\xca\xf3\x18\xa2\x54\xd3\x45\x1f\x4a\xd9\x93\x23\x79\x0e\x95\x19\xce\xff\xae\xff\xa9\x4f\xab\xd3\xd3\x47\x8b\xbc\x67\xa1\x41\x8b\x03\xf9\x29\xf7\xf3\x90\x57\x55\x16\x15\xe5\xb1\xb8\x94\xab\xcd\x41\x18\x91\x98\xe4\x35\x7d\x1d\xac\x47\x55\x49\xd8\x91\xc7\xd1\xfd\x94\xdb\x07\x1c\xdd\xcf\x41\x7d\x28\x8b\x5f\x01\x00\x00\xff\xff\xf4\x92\x39\x12\xff\x04\x00\x00")

func bootstrapDigitalocean_k8s_ubuntu_1604_nodeShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapDigitalocean_k8s_ubuntu_1604_nodeSh,
		"bootstrap/digitalocean_k8s_ubuntu_16.04_node.sh",
	)
}

func bootstrapDigitalocean_k8s_ubuntu_1604_nodeSh() (*asset, error) {
	bytes, err := bootstrapDigitalocean_k8s_ubuntu_1604_nodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/digitalocean_k8s_ubuntu_16.04_node.sh", size: 1279, mode: os.FileMode(493), modTime: time.Unix(1502134047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapInjectGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xd1\x6a\xdb\x30\x14\x86\xaf\x6b\xf0\x3b\xfc\xe4\x2a\x01\xcf\x6e\x7b\x33\xe8\xd8\x85\xd7\x76\xcc\xb4\x24\x10\xa7\x2b\xa5\xf4\x42\x96\x4f\x6c\xad\x8e\xa4\x49\xc7\x75\xc3\xe8\x03\xed\x35\xf6\x64\x43\x4e\x52\x16\x66\x30\x82\x73\xfe\xff\xd3\x7f\x8e\xb2\x0c\x97\xc6\x6e\x9d\x6a\x5a\xc6\x9f\xdf\x38\x3f\x3d\xfb\x88\x55\x4b\xb8\xe9\x2b\x25\x8d\xd3\xc8\x7b\x6e\x8d\xf3\x71\x94\x65\xe1\xc7\xad\x92\xa4\x3d\xd5\xe8\x75\x4d\x0e\xdc\x12\x72\x2b\x64\x4b\x87\x4e\x82\xef\xe4\xbc\x32\x1a\xe7\xe9\x29\xa6\x41\x30\xd9\xb7\x26\xb3\x4f\x23\x63\x6b\x7a\x6c\xc4\x16\xda\x30\x7a\x4f\xe0\x56\x79\xac\x55\x47\xa0\x57\x49\x96\xa1\x34\xa4\xd9\xd8\x4e\x09\x2d\x09\x83\xe2\x76\xbc\x68\x8f\x49\x47\xc8\xc3\x1e\x62\x2a\x16\x4a\x43\x40\x1a\xbb\x85\x59\xff\xab\x84\xe0\xf7\xe0\xe1\x6b\x99\xed\x45\x96\x0d\xc3\x90\x8a\x31\x74\x6a\x5c\x93\x75\x3b\xb1\xcf\x6e\x8b\xcb\xeb\x79\x79\xfd\xe1\x3c\x3d\x7d\xb7\xdd\xe9\x8e\xbc\x87\xa3\x9f\xbd\x72\x54\xa3\xda\x42\x58\xdb\x29\x29\xaa\x8e\xd0\x89\x01\xc6\x41\x34\x8e\xa8\x06\x9b\x90\x7c\x70\x8a\x95\x6e\x12\x78\xb3\xe6\x41\x38\x1a\x39\xb5\xf2\xec\x54\xd5\xf3\xd1\xea\x0e\x39\x95\x3f\x12\x18\x0d\xa1\x31\xc9\x4b\x14\xe5\x04\x5f\xf2\xb2\x28\x93\x91\x72\x5f\xac\xbe\x2d\xee\x56\xb8\xcf\x97\xcb\x7c\xbe\x2a\xae\x4b\x2c\x96\xb8\x5c\xcc\xaf\x8a\x55\xb1\x98\x97\x58\x7c\x45\x3e\x7f\xc0\x4d\x31\xbf\x4a\x40\x8a\x5b\x72\xa0\x57\xeb\xc2\x0c\xc6\x41\x85\xa5\x52\xbd\xdb\x60\x49\x74\x14\x62\x6d\x76\xa1\xbc\x25\xa9\xd6\x4a\xa2\x13\xba\xe9\x45\x43\x68\xcc\x0b\x39\xad\x74\x03\x4b\x6e\xa3\x7c\x78\x5e\x0f\xa1\xeb\x91\xd3\xa9\x8d\x62\xc1\x63\xed\xbf\xd1\xd2\x38\x8a\x23\x2b\xe4\x73\xe0\x54\xc6\xb0\x67\x27\x6c\x28\xaa\x8d\x35\x8e\x31\x09\x63\xeb\xc6\x4f\x42\x6d\xdd\x6b\x89\x42\xff\x20\xc9\xd3\x5a\xb0\xc0\xe3\x53\xb5\x65\x4a\xf0\x22\xba\x9e\x3c\x36\xc2\x3e\xee\xf4\x4f\xbb\x63\x86\xe9\x41\x42\xce\x19\x37\xc3\xaf\x38\x3a\xf1\xec\xae\x82\xfb\xe2\x33\x76\xb2\x11\x36\x8b\xa3\x93\x30\xe3\x73\x82\x97\xd0\x72\x42\x37\x74\x20\x07\xdb\xbb\xef\x60\xf3\xe9\x92\x6c\x27\x24\x4d\xf7\x9d\x64\x34\x27\x38\x0b\xac\xb7\x38\x3a\x71\xc4\xbd\xd3\xfb\x98\x07\xd5\x2c\x81\x56\x5d\x1c\xbd\xc5\xd1\xdf\x00\x00\x00\xff\xff\xd5\x3a\x73\xc3\x61\x03\x00\x00")

func bootstrapInjectGoBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapInjectGo,
		"bootstrap/inject.go",
	)
}

func bootstrapInjectGo() (*asset, error) {
	bytes, err := bootstrapInjectGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/inject.go", size: 865, mode: os.FileMode(493), modTime: time.Unix(1502122550, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapVpnMeshbirdmasterSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\xcd\x6a\x1b\x31\x10\xbe\x2f\xec\x3b\x7c\xb5\x43\x68\x21\xde\x3d\xf5\x52\x68\x0f\x69\x0c\x75\x43\x42\x69\x43\x4b\x4e\x45\x2b\x8d\x57\x13\x6b\xa5\x45\x1a\xc5\x31\x84\x3e\x7b\xd1\xda\xa5\x76\x5e\x20\x42\x97\x99\xf9\xf4\xfd\x30\x9a\xbf\x69\x73\x8a\x6d\xc7\xbe\x25\xff\x88\x4e\x25\x5b\x57\x89\x04\x0b\xaa\x2b\x6d\xf0\xa7\xae\xea\x6a\x8e\xc5\x2b\x9d\xa2\x7d\x67\x29\x11\x1e\x95\xcb\x94\xa0\x22\x81\xfd\x03\x69\x21\x03\xf6\x12\x20\x96\x90\x74\xe4\x51\x1a\xfc\xa2\x09\x40\x4f\xa3\x63\xcd\xe2\x76\xf0\x41\x90\x13\xfb\x1e\x0a\x42\xc3\xe8\x94\x94\xc2\x29\xdf\x67\xd5\x13\x24\x1c\xe8\x26\x9e\xbd\x48\x11\x55\xa9\x8c\xc8\xeb\x90\xe3\x84\xb3\x84\x9c\x28\x96\xae\xe3\x81\x27\x3c\xc7\xd2\x43\x58\x9f\x50\x87\x9e\x35\xd8\x17\x40\x22\xac\xd9\x51\x6a\x70\xb9\x83\xa1\xc4\xbd\x87\x72\xee\x7f\x82\x43\xaa\x64\x43\x76\xa6\xe8\x76\x04\xd5\xb9\xc9\x57\x47\x28\x8b\x50\x82\x98\xbd\xf0\x40\x17\x50\xde\xec\xf3\x5a\x72\xee\x90\x1a\x91\x94\xc3\x36\xc4\x4d\x83\xd5\x1a\xbb\x90\xe1\x89\x0c\x74\xf0\x86\x85\x83\x57\x6e\xef\xe9\x02\xdb\xc8\x42\x60\x29\xee\xf6\x9b\x9e\x23\x44\x0c\x6a\x43\x50\x3e\x88\xa5\x78\x42\xdd\xd4\xd5\x7c\xba\x37\xcb\x1f\x5f\x2e\x57\xdf\xaf\x7e\x5f\x2f\xef\x3f\xce\x56\xb7\x5f\x97\x9f\xef\x96\x57\xa5\x7b\xbd\xbc\x9f\xbd\xee\x07\x29\xea\x3f\xbf\xdd\xe2\x86\x4a\x20\x9d\xa3\x83\x15\x19\x3f\xb4\xed\x40\xc9\x76\x1c\x4d\xa3\xc3\xd0\xb2\x4f\xa2\x9c\x6b\x92\xc5\x33\x0a\xf2\xdf\x14\x9e\xb6\x38\xff\x84\x56\x86\xb1\x75\xa1\xdf\xd0\xee\x45\xe0\xb3\xb7\x5a\xc9\xf1\x1c\xcf\xd0\x59\xb0\x30\x98\x61\x86\xc5\x1a\xef\xdf\xd5\x15\x69\x1b\x70\x76\xfc\x10\x07\xd2\x66\xa2\xa4\xa7\x31\x44\xc1\x29\xf3\x71\x75\x64\xe9\x21\xb0\xc7\x79\x5d\xfd\x0d\x00\x00\xff\xff\x1e\xd5\xdb\x03\x9e\x03\x00\x00")

func bootstrapVpnMeshbirdmasterShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapVpnMeshbirdmasterSh,
		"bootstrap/vpn/meshbirdMaster.sh",
	)
}

func bootstrapVpnMeshbirdmasterSh() (*asset, error) {
	bytes, err := bootstrapVpnMeshbirdmasterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/vpn/meshbirdMaster.sh", size: 926, mode: os.FileMode(493), modTime: time.Unix(1502134047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapVpnMeshbirdnodeSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\xe5\x2a\x4e\x2d\x51\xd0\x4d\xe5\xe5\x4a\x4e\x51\xa8\xe3\xe5\xe2\xe5\x52\x56\x08\x0b\xf0\x53\xf0\x4d\x05\xc9\x25\x97\x16\xe5\x28\x64\x94\x94\x14\x58\xe9\xeb\xe7\xa6\x16\x67\x24\x65\x16\xa5\xe8\x25\xe7\xe7\xea\x67\xe6\x15\x97\x24\xe6\xe4\xe8\x15\x67\x28\xd4\x28\x80\x54\xa6\x56\x14\xe4\x17\x95\x28\xf8\xba\x06\x7b\x38\x79\x06\xb9\xc4\x7b\xbb\x46\xda\xaa\x20\xf3\x78\xb9\x60\x06\x28\x64\xe5\x67\xe6\x29\xa8\xf1\x72\x01\x02\x00\x00\xff\xff\xdf\xaa\x86\x03\x8f\x00\x00\x00")

func bootstrapVpnMeshbirdnodeShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapVpnMeshbirdnodeSh,
		"bootstrap/vpn/meshbirdNode.sh",
	)
}

func bootstrapVpnMeshbirdnodeSh() (*asset, error) {
	bytes, err := bootstrapVpnMeshbirdnodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/vpn/meshbirdNode.sh", size: 143, mode: os.FileMode(493), modTime: time.Unix(1502134047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap/README.md": bootstrapReadmeMd,
	"bootstrap/amazon_k8s_ubuntu_16.04_master.sh": bootstrapAmazon_k8s_ubuntu_1604_masterSh,
	"bootstrap/amazon_k8s_ubuntu_16.04_node.sh": bootstrapAmazon_k8s_ubuntu_1604_nodeSh,
	"bootstrap/digitalocean_k8s_ubuntu_16.04_master.sh": bootstrapDigitalocean_k8s_ubuntu_1604_masterSh,
	"bootstrap/digitalocean_k8s_ubuntu_16.04_node.sh": bootstrapDigitalocean_k8s_ubuntu_1604_nodeSh,
	"bootstrap/inject.go": bootstrapInjectGo,
	"bootstrap/vpn/meshbirdMaster.sh": bootstrapVpnMeshbirdmasterSh,
	"bootstrap/vpn/meshbirdNode.sh": bootstrapVpnMeshbirdnodeSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{bootstrapReadmeMd, map[string]*bintree{}},
		"amazon_k8s_ubuntu_16.04_master.sh": &bintree{bootstrapAmazon_k8s_ubuntu_1604_masterSh, map[string]*bintree{}},
		"amazon_k8s_ubuntu_16.04_node.sh": &bintree{bootstrapAmazon_k8s_ubuntu_1604_nodeSh, map[string]*bintree{}},
		"digitalocean_k8s_ubuntu_16.04_master.sh": &bintree{bootstrapDigitalocean_k8s_ubuntu_1604_masterSh, map[string]*bintree{}},
		"digitalocean_k8s_ubuntu_16.04_node.sh": &bintree{bootstrapDigitalocean_k8s_ubuntu_1604_nodeSh, map[string]*bintree{}},
		"inject.go": &bintree{bootstrapInjectGo, map[string]*bintree{}},
		"vpn": &bintree{nil, map[string]*bintree{
			"meshbirdMaster.sh": &bintree{bootstrapVpnMeshbirdmasterSh, map[string]*bintree{}},
			"meshbirdNode.sh": &bintree{bootstrapVpnMeshbirdnodeSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

