// Code generated by go-bindata.
// sources:
// bootstrap/README.md
// bootstrap/amazon_k8s_ubuntu_16.04_master.sh
// bootstrap/amazon_k8s_ubuntu_16.04_node.sh
// bootstrap/digitalocean_k8s_ubuntu_16.04_master.sh
// bootstrap/digitalocean_k8s_ubuntu_16.04_node.sh
// bootstrap/inject.go
// bootstrap/vpn/meshbirdMaster.sh
// bootstrap/vpn/meshbirdNode.sh
// DO NOT EDIT!

package bootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xb1\x6e\xdc\x30\x10\x44\x7b\x7e\xc5\x00\x57\xa4\x31\x94\x4f\x08\x90\x22\xc0\x15\x49\x65\x38\xad\x28\x71\x64\xae\x8f\xe2\x0a\xe4\xd2\x82\x10\xe4\xdf\x03\xea\x1c\x23\x81\xeb\xdd\xd9\x79\x3b\x73\xc1\x57\x55\xab\x56\xfc\xe6\xdc\x63\x64\x25\x7c\x21\x2c\x12\xd3\xdf\x01\xea\x5c\x64\xb3\x0a\x8b\xde\x50\xa3\x6c\xd8\xc5\xe2\xb9\x14\xb8\xf8\x96\x0c\xe3\xad\x4d\x32\x6b\xc9\x23\xb6\xa2\x8b\x24\xd6\xc1\xb9\x6f\x64\xc2\x52\x48\x98\xc2\x87\x80\x43\x5b\x81\xee\xf9\x01\x5a\xb0\x6a\x90\xe5\xe8\x67\xba\xab\xc1\xe7\x03\x26\x2b\x87\x93\xe4\xdd\xb5\xf3\x70\x59\x38\x9b\xbc\x32\x1d\xd8\x3b\xc5\x4e\xb4\xae\xaa\x18\x5b\x65\x41\xf0\xe6\xc7\xee\x22\x59\x0c\x1e\x4f\xdf\x9d\xbb\x5c\x2e\xb8\x22\x93\xa1\x0f\x8c\xeb\x96\xbc\x11\xda\x0c\x9a\x09\x5d\xde\xac\x3f\x3c\xea\xdc\x0f\xed\xa8\x08\x9a\x3f\xd9\x80\x9f\x45\x8c\x98\x7c\x8d\x48\x72\x23\x7c\xff\x71\xf8\xcf\x60\xd5\xc2\x13\x02\x92\xe1\x3f\x9c\xbc\x43\xd7\xa8\x2d\x05\x5c\x11\xf4\x8b\x73\xd7\xe5\xf4\x28\xf4\x29\x1d\x98\x7d\x86\xe6\x74\xe0\x99\x06\x31\x2c\x45\xd7\x7f\x53\xf5\x39\x20\xeb\x1e\xd9\xd3\x48\x95\x0f\xa7\xb8\xab\x7a\x0e\xbd\x8a\xf1\xc9\xa7\xc6\xfa\xeb\xf7\x88\x6a\xa5\xcd\xd6\xbf\x0e\x5c\x24\x13\x73\xab\xa6\x2b\x6e\x3c\x3e\xbf\xf6\x2d\x6c\x5e\xca\x5b\xa1\xbb\xa4\x84\x89\x90\xfc\xc2\xd9\x18\x20\xd9\xf4\xde\xd4\x1d\x7e\x70\x8f\x51\xea\xfb\x9e\xc7\xac\x81\x98\xa3\xcf\xcf\x7c\x38\xc1\xa4\x76\x11\x73\xb8\x47\x3d\x11\x2f\xad\xda\x79\x7e\xf8\x13\x00\x00\xff\xff\x8c\x9a\x9e\x97\x62\x02\x00\x00")

func bootstrapReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapReadmeMd,
		"bootstrap/README.md",
	)
}

func bootstrapReadmeMd() (*asset, error) {
	bytes, err := bootstrapReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/README.md", size: 610, mode: os.FileMode(493), modTime: time.Unix(1501922358, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAmazon_k8s_ubuntu_1604_masterSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4d\x6f\xdc\x36\x10\xbd\xf3\x57\xbc\xee\x1a\x48\x03\x84\xa2\x9d\x16\x2d\x60\xc0\x05\x92\xd4\x07\x37\x45\x62\x18\x6e\x7b\xe9\x85\x22\x67\x25\x76\x29\x52\x20\x87\x6b\x2f\x6c\xf7\xb7\x17\x94\x64\x7b\x8d\x06\x45\x6f\xd9\x8b\x76\x1e\x67\xde\x7c\x3d\x72\xfd\x8d\x2a\x39\xa9\xd6\x05\x45\x61\x87\x56\xe7\x5e\x64\x62\x48\x12\xc6\xe2\x6f\x21\xd6\x90\x5f\xe9\x27\xd6\xb8\xee\x29\x13\x76\xda\x17\xca\xd0\x89\xe0\xc2\x5f\x64\x98\x2c\x5c\xe0\x08\xee\x09\xd9\x24\x37\x72\x83\x3f\x68\x72\xa0\xdb\xd1\x3b\xe3\xd8\xef\x11\x22\xa3\x64\x17\x3a\x68\x30\x0d\xa3\xd7\x5c\x0d\xaf\x43\x57\x74\x47\xe0\xb8\xd0\x4d\x3c\x73\x12\xb1\x86\xce\xf5\x84\x82\x89\x25\x4d\x6e\x3d\xa1\x64\x4a\x15\xf5\x6e\x70\x93\xbb\x4b\x15\x43\xdc\xbc\x60\x8e\x9d\x33\x70\xa1\x3a\x64\xc2\xc6\x79\xca\x0d\xde\xef\x61\x29\xbb\x2e\x40\x7b\xff\xdc\xc0\xd2\x54\xee\x63\xf1\x56\xac\xd1\x12\x74\xeb\xa7\xaa\x5a\x42\x5d\x81\x66\xa4\x12\xd8\x0d\xf4\x06\x3a\xd8\xb9\xdb\x9e\xbc\x5f\x7a\x46\x22\xed\x71\x13\xd3\xb6\xc1\xc5\x06\xfb\x58\x10\x88\x2c\x4c\x0c\xd6\xb1\x8b\x41\xfb\xb9\xa4\x37\xb8\x49\x8e\x09\x8e\x6b\x71\xd3\x8a\xd7\x88\x09\x83\xde\x12\x74\x88\xdc\x53\x7a\xc1\xdc\x88\xb5\x58\x8b\xeb\xcf\x1f\xcf\x3f\x9d\xad\x2e\x3e\xfd\x72\xfe\xe1\xfa\xfc\xe7\xc9\x5c\x89\xcb\xcf\x57\xd7\xcf\x60\xb5\x56\x5f\x53\x23\xc2\x94\xe4\x21\x33\x7a\xe6\x31\x9f\x2a\x35\x6a\xb3\xd5\x1d\xe5\xc6\xf8\x58\x6c\xd3\xc5\xd8\x79\x6a\x4c\x1c\x94\x1e\x59\xd9\x68\xea\x57\x6e\x69\xdf\x74\x63\x87\x7b\xe4\x62\x23\x16\x08\xda\x5a\x48\xc1\xb1\x98\x1e\x8a\x78\xf2\x55\x39\x96\x64\x28\x37\xde\x65\x6e\xac\xda\x96\x96\x52\x20\x5e\x10\x91\x7b\x48\x83\x57\x64\xfa\x88\x95\xa5\x76\xaa\xe4\x54\xd5\xd0\xe6\xc0\xd7\x45\x85\x67\x53\xde\x52\x70\xda\x63\xd0\x2e\xac\xf0\xd3\xff\x4d\xf6\x4a\x88\x5a\x6a\x47\x8c\x32\x5a\xcd\x04\xb9\x7f\x42\x5c\xc8\x5c\x25\x26\xf7\xf8\x53\x00\x40\x8e\x46\xf3\xf2\x9f\x5a\xae\xf2\xca\x8b\x69\xa3\xd9\x52\x6a\x5c\x5c\xec\xca\xc1\x49\x87\x3c\xc6\xc4\x72\x9a\xe5\x72\x52\x2b\xf0\xc4\x07\x96\xb6\xc3\xd9\x49\xf3\x63\x73\x2c\x8f\x8f\x17\x78\x9a\xb5\x2c\xec\x7c\x16\x42\xe4\x7d\x66\x1a\x0c\x7b\x50\x98\x34\x3d\x67\x3b\xc0\x33\xeb\xc4\x8f\xb0\xb8\xfc\xed\xfd\xaf\x17\x1f\x2e\x2e\xcf\x8e\xbe\x25\xf3\x76\x20\xd6\x56\xb3\x86\x94\x63\x69\xbd\x33\xd2\x8d\xbb\xef\x71\x0f\x53\x18\xd2\x62\x85\x15\xe4\x06\x6f\x5f\x8b\xcb\xab\x8b\xdf\xdf\x5d\x9f\x4f\x81\x6e\x63\x62\xd8\xb8\xba\xd1\x2e\xd1\x08\xf9\x0e\x27\x20\xee\x8f\x1f\x01\x17\x88\x0f\x48\x4e\x67\x92\x7f\xd1\x9e\xe0\x1e\xb7\x3a\x75\xf9\xb5\x10\x4b\xb3\x48\x94\x89\x9f\x2c\x17\x1c\x43\x4a\x3d\xba\x4c\x69\x47\x49\xb6\x2e\x58\x59\xe7\x86\xa3\xbb\x7a\x1f\x1e\x20\x25\xc7\x2d\x05\x1c\xdd\x4d\x97\xe6\x01\x2f\xfc\xb5\xdd\x51\x62\x97\x49\x6a\x6b\x13\xe5\x5c\xe3\x96\x11\x3c\xbc\xf0\x34\x94\x58\xd2\x2d\x27\x2d\xb3\x0e\x2f\xfd\x8e\xee\x9e\xda\x7f\x10\xd3\x53\xa9\xc3\x36\xe3\x23\xf9\x4c\x7b\x9c\xbe\x9e\xea\xad\xb3\xd6\xe3\xe8\x67\x45\xc8\xcd\xa3\x36\x6d\x34\xb9\x19\x53\xac\x6f\x91\xd1\xde\x99\xd8\xc4\xd4\xa9\xdd\xdb\xe6\x3b\xd5\x11\xd7\xd7\x4c\x4e\x3b\xa2\x43\x09\xaa\x45\x61\xba\x3e\x2e\xaa\x8f\xf9\xf1\x58\xdb\x41\x9d\x34\x3f\xa8\x85\x6a\xaf\x07\x3f\x27\x94\x53\x11\xf3\x62\x26\x89\x1f\x90\x69\x3b\xb8\xd0\xd4\x43\x21\x86\xad\x75\x09\x72\x84\xea\xe3\x40\xaa\xb4\x25\x70\x51\xd3\xf5\x11\x66\xfc\x8f\xd0\x2f\x04\xa8\x39\x9f\x30\x7d\xbc\x09\x90\x57\x98\x0f\x4f\xe7\xcf\x17\x02\xfe\x09\x00\x00\xff\xff\x97\x66\x54\x00\x03\x07\x00\x00")

func bootstrapAmazon_k8s_ubuntu_1604_masterShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAmazon_k8s_ubuntu_1604_masterSh,
		"bootstrap/amazon_k8s_ubuntu_16.04_master.sh",
	)
}

func bootstrapAmazon_k8s_ubuntu_1604_masterSh() (*asset, error) {
	bytes, err := bootstrapAmazon_k8s_ubuntu_1604_masterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/amazon_k8s_ubuntu_16.04_master.sh", size: 1795, mode: os.FileMode(493), modTime: time.Unix(1501922358, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAmazon_k8s_ubuntu_1604_nodeSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\x3d\x6f\xdc\x38\x14\xec\xf9\x2b\xe6\x56\x06\xdc\x58\x92\xaf\x3a\xc0\x80\x0f\xb8\x8f\x2d\x7c\x87\x38\x40\xb2\x40\x9a\x34\x14\xf9\x2c\xd1\x4b\xf1\x09\x7c\x8f\xb6\x17\x8e\xf3\xdb\x03\x69\x15\x7f\x74\xe9\xac\x46\x9a\xe1\x68\x38\x8f\x9c\xea\xb7\xb6\x48\x6e\xbb\x90\x5a\x4a\x77\xe8\xac\x0c\x46\x48\x51\x93\x71\x1e\xdf\x8d\xa9\x50\xbf\xd3\x63\x2a\xec\x06\x12\xc2\x9d\x8d\x85\x04\x36\x13\x42\xba\x25\xa7\xe4\x11\x92\x32\x74\x20\x88\xcb\x61\xd2\x06\x5f\x68\x11\xd0\xc3\x14\x83\x0b\x1a\x0f\x48\xac\x28\x12\x52\x0f\x0b\xa5\x71\x8a\x56\x67\x10\x6d\xea\x8b\xed\x09\xca\xab\xdd\xe2\x73\xdc\xc4\x54\xb0\x32\xaf\x50\x72\x5c\xf2\x22\x1b\x08\x45\x28\xcf\x6c\x0c\x63\x58\xe4\x21\xcf\x1c\xf8\xe6\x8d\x33\xf7\xc1\x21\xa4\x59\x20\x84\x9b\x10\x49\x1a\xfc\x7d\x80\x27\x09\x7d\x82\x8d\xf1\x65\x80\x75\x28\x19\xb8\x44\x6f\x2a\x74\x04\xdb\xc5\x25\x55\x47\x98\xaf\xc0\x2a\x72\x49\x1a\x46\x3a\x83\x4d\xfe\x38\xed\x40\x31\xae\x33\x23\x93\x8d\xb8\xe7\xbc\x6f\x70\x75\x83\x03\x17\x24\x22\x0f\xc7\xc9\x07\x0d\x9c\x6c\x3c\x46\x3a\xc3\x7d\x0e\x4a\x08\x3a\x87\x5b\xae\xb8\x02\x67\x8c\x76\x4f\xb0\x89\x75\xa0\xfc\xc6\xb9\x31\x95\xa9\xcc\xee\xe3\xff\xdb\xeb\xcb\xcd\xd5\xf5\x7f\xdb\x7f\x76\xdb\x7f\x17\xb8\x31\x1f\xfe\xfa\xbc\xdb\x7e\x7a\xa1\x8f\x78\xf3\x9e\x3d\x31\xae\xe4\x88\x5a\x30\xa8\x4e\x72\xd1\xb6\x93\x75\x7b\xdb\x93\x34\x2e\x72\xf1\x4d\xcf\xdc\x47\x6a\x1c\x8f\xad\x9d\xb4\xf5\xec\xe6\x77\xbd\xa7\x43\xd3\x4f\x3d\xbe\x41\x8a\x67\xac\x14\xac\xf7\xa8\x8d\x72\x71\x03\x5a\xd2\x45\xdb\x0a\x97\xec\x48\x9a\x18\x44\x1b\xdf\xee\x4b\x47\x39\x91\xae\x8c\x91\x01\xb5\xc3\x29\xb9\x81\xb1\xf1\xd4\x2d\x49\x2e\xda\xf9\xd7\xe6\x95\x36\x70\x8b\x17\x58\x3f\x50\x0a\x36\x62\xb4\x21\x6d\xf0\xe7\xaf\x6e\x76\x6a\xcc\x1c\xb5\x27\x45\x99\xbc\x55\x42\x7d\x78\x66\x42\x12\x9d\x6b\x56\x1f\xf0\xd5\x00\x80\xb0\xb3\xba\x7e\x53\xa7\x73\xc5\x64\x85\x9e\xdd\x9e\x72\x13\x78\xc5\xb3\x87\x66\x9b\x64\xe2\xac\xf5\x72\x96\xeb\xca\x9c\x20\x92\xbe\x42\xd6\x8f\x97\xbf\x37\x7f\x34\xe7\xf5\xf9\xb9\x31\x72\x10\xa5\xd1\x69\x04\xa5\xa5\xc4\x47\xeb\x57\xbc\xa8\xcd\xfa\x93\x36\xab\x03\x32\x09\xe9\x33\xba\xe5\x90\x50\xd7\xca\x7b\x4a\x38\x79\x5c\xfa\xf6\x84\x93\xc7\x63\xc3\x9e\x7e\x04\x00\x00\xff\xff\x23\x59\x14\x94\xaa\x04\x00\x00")

func bootstrapAmazon_k8s_ubuntu_1604_nodeShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAmazon_k8s_ubuntu_1604_nodeSh,
		"bootstrap/amazon_k8s_ubuntu_16.04_node.sh",
	)
}

func bootstrapAmazon_k8s_ubuntu_1604_nodeSh() (*asset, error) {
	bytes, err := bootstrapAmazon_k8s_ubuntu_1604_nodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/amazon_k8s_ubuntu_16.04_node.sh", size: 1194, mode: os.FileMode(493), modTime: time.Unix(1501922358, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapDigitalocean_k8s_ubuntu_1604_masterSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\x51\x6b\x1c\x37\x10\x7e\x5f\xd8\xff\xf0\xf5\x6c\x48\x03\x91\x64\xa7\xd0\x82\xc1\x85\x24\xf5\x83\xdb\x92\x18\xe3\xb6\x2f\x7d\xd1\x49\x73\xbb\xea\x69\xa5\x45\x9a\x75\x7c\x38\xce\x6f\x2f\xd2\xed\xfa\xce\x2f\xa5\x6f\x39\x0e\x8e\xf9\x34\x9a\xef\x1b\xcd\x27\xdd\xc9\x77\x6a\xca\x49\xad\x5d\x50\x14\xee\xb1\xd6\xb9\x6f\x9b\x4c\x0c\x41\x6d\x63\x2c\xbe\xb6\x4d\xdb\x9c\x40\x7c\xa3\x4f\xe1\xbe\xeb\x29\x13\xee\xb5\x9f\x28\x43\x27\x82\x0b\xff\x90\x61\xb2\x70\x81\x23\xb8\x27\x64\x93\xdc\xc8\x12\x7f\x51\x4d\xa0\x87\xd1\x3b\xe3\xd8\xef\x10\x22\x63\xca\x2e\x74\xd0\x60\x1a\x46\xaf\xb9\x04\x5e\x87\x6e\xd2\x1d\x81\xe3\x5c\xae\xd6\xd9\x93\x14\x52\x9d\xcb\x12\x05\x13\xa7\x54\xf3\x7a\xc2\x94\x29\x15\xd4\xbb\xc1\xd5\x7c\x97\x0a\x86\xb8\x79\x51\x3a\x76\xce\xc0\x85\x92\x90\x09\x1b\xe7\x29\x4b\xbc\xdf\xc1\x52\x76\x5d\x80\xf6\xfe\xd0\xc1\xdc\x55\xee\xe3\xe4\x6d\xe1\x5d\x13\xf4\xda\x57\x5d\x6b\x42\x19\x84\x66\xa4\x29\xb0\x1b\xe8\x0d\x74\xb0\xfb\x7e\x7b\xf2\x7e\xee\x1a\x89\xb4\xc7\xe7\x98\xb6\x12\xd7\x1b\xec\xe2\x84\x40\x64\x61\x62\xb0\x8e\x5d\x0c\xda\xef\x35\xbd\xc1\xe7\xe4\x98\xe0\xb8\xa8\xdb\x4f\xfa\x04\x31\x61\xd0\x5b\x82\x0e\x91\x7b\x4a\x2f\x4a\xcb\xb6\x39\xa9\xdf\xbb\x4f\xbf\x5d\x7d\xbc\x5c\x5d\x7f\xfc\xf5\xea\xc3\xdd\xd5\x2f\x35\x5c\xb5\xcd\xcd\xa7\xdb\xbb\x03\x5a\xa2\xd5\xb2\xe3\x5b\x5a\xa6\x6d\xcc\x94\x3c\x44\x46\xcf\x3c\xe6\x0b\xa5\x46\x6d\xb6\xba\xa3\x2c\x8d\x8f\x93\x95\x5d\x8c\x9d\x27\x69\xe2\xa0\xf4\xc8\xca\x46\x53\x7e\xc5\x96\x76\xb2\x1b\x3b\x7c\x41\x9e\x6c\xc4\x0c\x41\x5b\x0b\xd1\x36\x1c\x27\xd3\x43\x11\xd7\x64\x95\xe3\x94\x0c\x65\xe9\x5d\x66\x69\xd5\x76\x5a\x53\x0a\xc4\x33\xd2\x36\xb9\x87\x30\x78\x45\xa6\x8f\x58\x59\x5a\x57\x2d\x17\xaa\xec\x95\x47\xc9\x2e\x2a\x1c\x42\xf1\x40\xc1\x69\x8f\x41\xbb\xb0\xc2\xcf\xff\x97\xed\x55\xe9\xb9\xc8\xed\x88\x31\x8d\x56\x33\x41\xec\x0e\x90\x0b\x99\x8b\xed\xc4\x0e\x7f\xb7\x0d\x00\xe4\x68\x34\x2f\x01\xad\xb9\x78\x2e\x2f\xb1\x8d\x66\x4b\x49\xba\xb8\x00\xa5\x0e\x27\x1d\xf2\x18\x13\x8b\x7a\xa8\xcb\x52\x51\xe2\x89\x8f\x43\x6d\x87\xcb\x73\xf9\x93\x3c\x13\x67\x67\x0b\x5e\xcf\x5d\x4c\xec\x7c\x2e\x5a\xdb\x26\xef\x32\xd3\x60\xd8\x83\x42\x35\xfc\x9e\xf4\x78\x21\xb3\x4e\xfc\x8c\xb7\xcd\xcd\xed\xf5\x9f\xef\xee\xae\xae\x6f\x2e\x4f\xbf\x77\x1b\x13\xc3\xc6\x95\x59\x75\x89\x46\x88\x77\x38\xc7\x8a\xa7\x70\xb6\x5a\x20\x17\x88\x81\x2f\x30\x13\x43\x58\xac\x2e\x56\x10\x1b\xbc\x3d\x42\x50\x91\xf3\xd7\x6d\x53\xa7\x74\xfa\x4c\x50\x4e\x9e\x87\x51\x49\x37\xb6\xcd\xcd\x1f\xef\x7f\xbf\xfe\x50\x59\xab\xad\x16\x6a\x39\xd0\xeb\x7d\x2f\x73\xd3\x48\x94\x89\x0f\xa1\x0b\x8e\x21\x84\x1e\x5d\xa6\x74\x4f\x49\xac\x5d\xb0\xa2\x1c\x21\x4e\x1f\xcb\x65\x79\x82\x10\x1c\xb7\x14\x70\xfa\x58\xaf\xd4\x13\x5e\xe4\x6b\x7b\x4f\x89\x5d\x26\xa1\xad\x4d\x94\x73\xd9\x37\xab\x79\x7a\x91\x69\x28\xb1\xa0\x07\x4e\x5a\x64\x1d\x5e\xe6\x9d\x3e\x3e\xf7\xf5\x74\xd0\x5b\x0e\x58\x8f\xa3\x9f\x1d\x21\x36\x8b\x3f\x6d\x34\x59\x8e\x29\x96\x07\xca\x68\xef\x4c\x94\x31\x75\xea\xfe\xad\xfc\x41\x75\xc4\xe5\x89\x13\x75\x32\x74\x6c\x43\x35\x5b\x4c\x97\x07\x47\xf5\x31\x2f\xcb\xda\x0e\xea\x5c\xfe\xa8\xe6\x52\x3b\x3d\xf8\x99\x51\x54\x19\xfb\x29\x56\x9f\x1f\x55\xd3\x76\x70\x41\x96\xc5\xfd\xdf\xcf\x6d\x8c\xdc\x36\xc3\xd6\xba\x04\x31\xe2\xab\xaa\x57\xa8\x6d\xcc\xf8\x1f\x5b\x97\x34\xb5\x27\x29\x95\xfe\x0d\x00\x00\xff\xff\xe5\xc6\x54\x4b\xee\x06\x00\x00")

func bootstrapDigitalocean_k8s_ubuntu_1604_masterShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapDigitalocean_k8s_ubuntu_1604_masterSh,
		"bootstrap/digitalocean_k8s_ubuntu_16.04_master.sh",
	)
}

func bootstrapDigitalocean_k8s_ubuntu_1604_masterSh() (*asset, error) {
	bytes, err := bootstrapDigitalocean_k8s_ubuntu_1604_masterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/digitalocean_k8s_ubuntu_16.04_master.sh", size: 1774, mode: os.FileMode(493), modTime: time.Unix(1502119060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapDigitalocean_k8s_ubuntu_1604_nodeSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\x4d\x6b\xdc\x3a\x14\xdd\x1b\xfc\x1f\xce\x9b\x09\x64\x13\xdb\x79\xab\x07\x81\x3c\x78\xaf\x9d\x45\x5a\x9a\x42\x3b\xd0\x4d\x37\xb2\x74\x63\x2b\x23\x4b\x46\xf7\x2a\xc9\x90\xa6\xbf\xbd\xc8\xf6\xe4\xa3\xd9\x74\x97\x61\xc0\x9c\x73\xaf\xce\x3d\x57\x3a\xeb\xbf\x9a\xc4\xb1\x69\xad\x6f\xc8\xdf\xa0\x55\xdc\x97\x05\x93\xa0\xa2\xb2\xd0\x06\x3f\xcb\xa2\x2c\xd6\xa8\xde\xe8\x97\x67\x6f\x7b\x62\xc2\x8d\x72\x89\x18\x2a\x12\xac\xbf\x26\x2d\x64\x60\xbd\x04\x48\x4f\x60\x1d\xed\x28\x35\xbe\xd1\xd4\x40\x77\xa3\xb3\xda\x8a\xdb\xc3\x07\x41\x62\xeb\x3b\x28\x08\x0d\xa3\x53\x92\x81\x53\xbe\x4b\xaa\x23\x48\x58\xe4\x26\x9d\x79\x48\x1e\xaa\x38\x97\xc8\xeb\x90\xe2\xd4\xd7\x13\x12\x53\xcc\xac\xb3\x83\x9d\xfa\x6d\xcc\x1c\xc2\xd5\x0b\xe9\xd0\x59\x0d\xeb\x73\x03\x13\xae\xac\x23\xae\xf1\xff\x1e\x86\xd8\x76\x1e\xca\xb9\xa7\x0d\x96\xad\xb8\x0f\xc9\x99\x3c\xb7\x25\xa8\xd6\x4d\xbe\x5a\x42\x7e\x08\x25\x88\xc9\x8b\x1d\xe8\x04\xca\x9b\x79\xdf\x9e\x9c\x5b\xb6\x46\x24\xe5\x70\x1b\xe2\xae\xc6\xc5\x15\xf6\x21\xc1\x13\x19\xe8\xe0\x8d\x15\x1b\xbc\x72\xb3\xa7\x13\xdc\x46\x2b\x04\x2b\xd9\xdd\xfc\xd2\x6b\x84\x88\x41\xed\x08\xca\x07\xe9\x29\xbe\x90\xae\xcb\x62\x3d\xfd\xb7\x9f\x3f\x6e\x2e\xcf\x57\x17\x97\x1f\x36\xef\xb6\x9b\xf7\x13\x5c\x95\xc5\xa7\xff\xbe\x6e\x37\x5f\x9e\xf8\x19\xaf\xde\x36\x30\x65\xc1\xc9\x04\xe8\x14\x1d\x2a\x46\x2f\x32\xf2\x59\xd3\x8c\x4a\xef\x54\x47\x5c\x6b\x17\x92\xa9\xbb\x10\x3a\x47\xb5\x0e\x43\xa3\x46\x69\x4c\xd0\xf9\x5b\xed\x68\x5f\x77\x63\x87\x1f\x98\x44\x16\x0a\xca\x18\x54\x8b\xb0\x84\xa4\x7b\x34\x24\xd3\x89\x86\x43\x8a\x9a\xb8\x76\x96\xa5\x36\xcd\x2e\xb5\x14\x3d\xc9\xc2\x2c\x67\xb8\x47\xa5\x71\x4c\xba\x0f\x58\x19\x6a\x27\x57\x67\x4d\x16\xa8\x9f\x9d\xb0\xa1\xc1\x13\xac\xee\xc8\x5b\xe5\x30\x28\xeb\x57\xf8\xf7\x4f\x47\x1e\x3f\x5e\x41\x76\xdf\x91\x20\x8d\x46\x09\xa1\xda\xff\xc6\x5b\xcf\x92\xd3\x58\xed\xf1\xbd\x2c\x00\x80\x83\x56\x72\x00\xd4\x4a\x8e\x22\x1f\xb0\x09\x7a\x47\xb1\xb6\xe1\x40\x64\x1d\x89\xca\xf3\x18\xa2\x54\xd3\x45\x1f\x4a\xd9\x93\x23\x79\x0e\x95\x19\xce\xff\xae\xff\xa9\x4f\xab\xd3\xd3\x47\x8b\xbc\x67\xa1\x41\x8b\x03\xf9\x29\xf7\xf3\x90\x57\x55\x16\x15\xe5\xb1\xb8\x94\xab\xcd\x41\x18\x91\x98\xe4\x35\x7d\x1d\xac\x47\x55\x49\xd8\x91\xc7\xd1\xfd\x94\xdb\x07\x1c\xdd\xcf\x41\x7d\x28\x8b\x5f\x01\x00\x00\xff\xff\xf4\x92\x39\x12\xff\x04\x00\x00")

func bootstrapDigitalocean_k8s_ubuntu_1604_nodeShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapDigitalocean_k8s_ubuntu_1604_nodeSh,
		"bootstrap/digitalocean_k8s_ubuntu_16.04_node.sh",
	)
}

func bootstrapDigitalocean_k8s_ubuntu_1604_nodeSh() (*asset, error) {
	bytes, err := bootstrapDigitalocean_k8s_ubuntu_1604_nodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/digitalocean_k8s_ubuntu_16.04_node.sh", size: 1279, mode: os.FileMode(493), modTime: time.Unix(1502119060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapInjectGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xd1\x6a\xdb\x30\x18\x85\xaf\xa3\xa7\x38\xe4\x2a\x01\xcf\x6e\x7b\x33\xe8\xd8\x85\xd7\x76\xcc\xb4\x24\x10\xa7\x2b\xa5\xf4\x42\x96\xff\xd8\x5a\x1d\x49\x93\x7e\xd7\x0d\xa5\x0f\xb4\xd7\xd8\x93\x0d\x25\xce\x58\x99\x6f\x0c\xfa\xcf\xf9\x74\xce\xaf\x2c\xc3\x85\x75\x3b\xaf\x9b\x96\xf1\xfb\x17\xce\x4e\x4e\x3f\x62\xdd\x12\xae\xfb\x4a\x2b\xeb\x0d\xf2\x9e\x5b\xeb\x83\xc8\x32\x91\x65\xb8\xd1\x8a\x4c\xa0\x1a\xbd\xa9\xc9\x83\x5b\x42\xee\xa4\x6a\xe9\x38\x49\xf0\x9d\x7c\xd0\xd6\xe0\x2c\x3d\xc1\x2c\x0a\xa6\xe3\x68\x3a\xff\x14\x11\x3b\xdb\x63\x2b\x77\x30\x96\xd1\x07\x02\xb7\x3a\x60\xa3\x3b\x02\xbd\x28\x72\x0c\x6d\xa0\xec\xd6\x75\x5a\x1a\x45\x18\x34\xb7\xfb\x7b\x46\x4a\x1a\x19\xf7\x23\xc3\x56\x2c\xb5\x81\x84\xb2\x6e\x07\xbb\xf9\x57\x08\xc9\x63\xe8\xf8\xb5\xcc\xee\x3c\xcb\x86\x61\x48\xe5\x3e\x70\x6a\x7d\x93\x75\x07\x69\xc8\x6e\x8a\x8b\xab\x45\x79\xf5\xe1\x2c\x3d\x19\x4d\xb7\xa6\xa3\x10\xe0\xe9\x67\xaf\x3d\xd5\xa8\x76\x90\xce\x75\x5a\xc9\xaa\x23\x74\x72\x80\xf5\x90\x8d\x27\xaa\xc1\x36\x86\x1e\xbc\x66\x6d\x9a\x04\xc1\x6e\x78\x90\x9e\x22\xa6\xd6\x81\xbd\xae\x7a\x7e\xb7\xb3\x63\x44\x1d\xde\x09\xac\x81\x34\x98\xe6\x25\x8a\x72\x8a\x2f\x79\x59\x94\x49\x84\xdc\x15\xeb\x6f\xcb\xdb\x35\xee\xf2\xd5\x2a\x5f\xac\x8b\xab\x12\xcb\x15\x2e\x96\x8b\xcb\x62\x5d\x2c\x17\x25\x96\x5f\x91\x2f\xee\x71\x5d\x2c\x2e\x13\x90\xe6\x96\x3c\xe8\xc5\xf9\xd8\xc0\x7a\xe8\xb8\x4d\xaa\xf7\xab\x2b\x89\xde\x45\xd8\xd8\x43\xa4\xe0\x48\xe9\x8d\x56\xe8\xa4\x69\x7a\xd9\x10\x1a\xfb\x4c\xde\x68\xd3\xc0\x91\xdf\xea\x10\x5f\x35\x40\x9a\x3a\x62\x3a\xbd\xd5\x2c\x79\x7f\xf4\x5f\xaf\x54\x08\x27\xd5\x53\x84\x54\xd6\x72\x60\x2f\x9d\x10\x7a\xeb\xac\x67\x4c\x63\x5f\xd3\x84\xa9\x10\x9b\xde\x28\x14\xe6\x07\x29\x9e\xd5\x92\x25\x1e\x1e\xab\x1d\x53\x82\x67\xd9\xf5\x14\xb0\x95\xee\xe1\xa0\x7e\x3c\xfc\xe6\x98\x1d\x25\xe4\xbd\xf5\x73\xbc\x8a\x49\x60\x7f\x19\xcd\xe7\x9f\x71\x50\xed\x59\x73\x31\x89\xd5\x9e\x12\x3c\xc7\x89\x97\xa6\xa1\x23\xf7\x55\x4c\xfe\xba\x8e\xa6\x90\xae\xc8\x75\x52\xd1\x6c\x9c\x24\x7b\x6f\x82\xd3\xb9\x98\xbc\x89\x89\x27\xee\xbd\x19\x13\x1e\x35\xf3\x04\x46\x77\xe2\x4d\xfc\x09\x00\x00\xff\xff\xbc\x34\x80\x62\x48\x03\x00\x00")

func bootstrapInjectGoBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapInjectGo,
		"bootstrap/inject.go",
	)
}

func bootstrapInjectGo() (*asset, error) {
	bytes, err := bootstrapInjectGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/inject.go", size: 840, mode: os.FileMode(493), modTime: time.Unix(1501922358, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapVpnMeshbirdmasterSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\xcd\x6a\x1b\x31\x10\xbe\x2f\xec\x3b\x7c\xb5\x43\x68\x21\xde\x3d\xf5\x52\x68\x0f\x69\x0c\x75\x43\x42\x69\x43\x4b\x4e\x45\x2b\x8d\x57\x13\x6b\xa5\x45\x1a\xc5\x31\x84\x3e\x7b\xd1\xda\xa5\x76\x5e\x20\x42\x97\x99\xf9\xf4\xfd\x30\x9a\xbf\x69\x73\x8a\x6d\xc7\xbe\x25\xff\x88\x4e\x25\x5b\x57\x89\x04\x0b\xaa\x2b\x6d\xf0\xa7\xae\xea\x6a\x8e\xc5\x2b\x9d\xa2\x7d\x67\x29\x11\x1e\x95\xcb\x94\xa0\x22\x81\xfd\x03\x69\x21\x03\xf6\x12\x20\x96\x90\x74\xe4\x51\x1a\xfc\xa2\x09\x40\x4f\xa3\x63\xcd\xe2\x76\xf0\x41\x90\x13\xfb\x1e\x0a\x42\xc3\xe8\x94\x94\xc2\x29\xdf\x67\xd5\x13\x24\x1c\xe8\x26\x9e\xbd\x48\x11\x55\xa9\x8c\xc8\xeb\x90\xe3\x84\xb3\x84\x9c\x28\x96\xae\xe3\x81\x27\x3c\xc7\xd2\x43\x58\x9f\x50\x87\x9e\x35\xd8\x17\x40\x22\xac\xd9\x51\x6a\x70\xb9\x83\xa1\xc4\xbd\x87\x72\xee\x7f\x82\x43\xaa\x64\x43\x76\xa6\xe8\x76\x04\xd5\xb9\xc9\x57\x47\x28\x8b\x50\x82\x98\xbd\xf0\x40\x17\x50\xde\xec\xf3\x5a\x72\xee\x90\x1a\x91\x94\xc3\x36\xc4\x4d\x83\xd5\x1a\xbb\x90\xe1\x89\x0c\x74\xf0\x86\x85\x83\x57\x6e\xef\xe9\x02\xdb\xc8\x42\x60\x29\xee\xf6\x9b\x9e\x23\x44\x0c\x6a\x43\x50\x3e\x88\xa5\x78\x42\xdd\xd4\xd5\x7c\xba\x37\xcb\x1f\x5f\x2e\x57\xdf\xaf\x7e\x5f\x2f\xef\x3f\xce\x56\xb7\x5f\x97\x9f\xef\x96\x57\xa5\x7b\xbd\xbc\x9f\xbd\xee\x07\x29\xea\x3f\xbf\xdd\xe2\x86\x4a\x20\x9d\xa3\x83\x15\x19\x3f\xb4\xed\x40\xc9\x76\x1c\x4d\xa3\xc3\xd0\xb2\x4f\xa2\x9c\x6b\x92\xc5\x33\x0a\xf2\xdf\x14\x9e\xb6\x38\xff\x84\x56\x86\xb1\x75\xa1\xdf\xd0\xee\x45\xe0\xb3\xb7\x5a\xc9\xf1\x1c\xcf\xd0\x59\xb0\x30\x98\x61\x86\xc5\x1a\xef\xdf\xd5\x15\x69\x1b\x70\x76\xfc\x10\x07\xd2\x66\xa2\xa4\xa7\x31\x44\xc1\x29\xf3\x71\x75\x64\xe9\x21\xb0\xc7\x79\x5d\xfd\x0d\x00\x00\xff\xff\x1e\xd5\xdb\x03\x9e\x03\x00\x00")

func bootstrapVpnMeshbirdmasterShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapVpnMeshbirdmasterSh,
		"bootstrap/vpn/meshbirdMaster.sh",
	)
}

func bootstrapVpnMeshbirdmasterSh() (*asset, error) {
	bytes, err := bootstrapVpnMeshbirdmasterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/vpn/meshbirdMaster.sh", size: 926, mode: os.FileMode(493), modTime: time.Unix(1502120803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapVpnMeshbirdnodeSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\xe5\x2a\x4e\x2d\x51\xd0\x4d\xe5\xe5\x4a\x4e\x51\xa8\xe3\xe5\xe2\xe5\x52\x56\x08\x0b\xf0\x53\xf0\x4d\x05\xc9\x25\x97\x16\xe5\x28\x64\x94\x94\x14\x58\xe9\xeb\xe7\xa6\x16\x67\x24\x65\x16\xa5\xe8\x25\xe7\xe7\xea\x67\xe6\x15\x97\x24\xe6\xe4\xe8\x15\x67\x28\xd4\x28\x80\x54\xa6\x56\x14\xe4\x17\x95\x28\xf8\xba\x06\x7b\x38\x79\x06\xb9\xc4\x7b\xbb\x46\xda\xaa\x20\xf3\x78\xb9\x60\x06\x28\x64\xe5\x67\xe6\x29\xa8\xf1\x72\x01\x02\x00\x00\xff\xff\xdf\xaa\x86\x03\x8f\x00\x00\x00")

func bootstrapVpnMeshbirdnodeShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapVpnMeshbirdnodeSh,
		"bootstrap/vpn/meshbirdNode.sh",
	)
}

func bootstrapVpnMeshbirdnodeSh() (*asset, error) {
	bytes, err := bootstrapVpnMeshbirdnodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/vpn/meshbirdNode.sh", size: 143, mode: os.FileMode(493), modTime: time.Unix(1502120803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap/README.md": bootstrapReadmeMd,
	"bootstrap/amazon_k8s_ubuntu_16.04_master.sh": bootstrapAmazon_k8s_ubuntu_1604_masterSh,
	"bootstrap/amazon_k8s_ubuntu_16.04_node.sh": bootstrapAmazon_k8s_ubuntu_1604_nodeSh,
	"bootstrap/digitalocean_k8s_ubuntu_16.04_master.sh": bootstrapDigitalocean_k8s_ubuntu_1604_masterSh,
	"bootstrap/digitalocean_k8s_ubuntu_16.04_node.sh": bootstrapDigitalocean_k8s_ubuntu_1604_nodeSh,
	"bootstrap/inject.go": bootstrapInjectGo,
	"bootstrap/vpn/meshbirdMaster.sh": bootstrapVpnMeshbirdmasterSh,
	"bootstrap/vpn/meshbirdNode.sh": bootstrapVpnMeshbirdnodeSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{bootstrapReadmeMd, map[string]*bintree{}},
		"amazon_k8s_ubuntu_16.04_master.sh": &bintree{bootstrapAmazon_k8s_ubuntu_1604_masterSh, map[string]*bintree{}},
		"amazon_k8s_ubuntu_16.04_node.sh": &bintree{bootstrapAmazon_k8s_ubuntu_1604_nodeSh, map[string]*bintree{}},
		"digitalocean_k8s_ubuntu_16.04_master.sh": &bintree{bootstrapDigitalocean_k8s_ubuntu_1604_masterSh, map[string]*bintree{}},
		"digitalocean_k8s_ubuntu_16.04_node.sh": &bintree{bootstrapDigitalocean_k8s_ubuntu_1604_nodeSh, map[string]*bintree{}},
		"inject.go": &bintree{bootstrapInjectGo, map[string]*bintree{}},
		"vpn": &bintree{nil, map[string]*bintree{
			"meshbirdMaster.sh": &bintree{bootstrapVpnMeshbirdmasterSh, map[string]*bintree{}},
			"meshbirdNode.sh": &bintree{bootstrapVpnMeshbirdnodeSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

